import os
import logging
import streamlit as st
from datetime import datetime
from typing import Dict, Any, List
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
import tempfile
import getpass
import socket

import upload_pdf
import process_rfp
from .chat import debug_api_key

logger = logging.getLogger(__name__)


def generate_pdf_report(rfp_data: Dict[str, Any], rfp_name: str, model_used: str = "gpt-4o") -> str:
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp:
        pdf_path = tmp.name

    doc = SimpleDocTemplate(pdf_path, pagesize=letter)
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle('Title', parent=styles['Heading1'], fontSize=16, textColor=colors.blue, spaceAfter=12)
    heading_style = ParagraphStyle('Heading', parent=styles['Heading2'], fontSize=14, textColor=colors.blue, spaceAfter=10, spaceBefore=10)
    subheading_style = ParagraphStyle('Subheading', parent=styles['Heading3'], fontSize=12, textColor=colors.darkblue, spaceAfter=8)
    normal_style = styles['Normal']
    normal_style.fontSize = 10
    content: List = []
    content.append(Paragraph(f"RFP Analysis Report: {rfp_name}", title_style))
    content.append(Spacer(1, 0.25*inch))

    generation_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        username = getpass.getuser()
    except Exception:
        username = "unknown_user"
    try:
        hostname = socket.gethostname()
    except Exception:
        hostname = "unknown_host"
    metadata = [
        [Paragraph("<b>Generated On:</b>", normal_style), Paragraph(generation_time, normal_style)],
        [Paragraph("<b>Generated By:</b>", normal_style), Paragraph(username, normal_style)],
        [Paragraph("<b>System:</b>", normal_style), Paragraph(hostname, normal_style)],
        [Paragraph("<b>Model Used:</b>", normal_style), Paragraph(model_used, normal_style)],
    ]
    metadata_table = Table(metadata, colWidths=[1.5*inch, 4*inch])
    metadata_table.setStyle(TableStyle([
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
    ]))
    content.append(metadata_table)
    content.append(Spacer(1, 0.25*inch))

    if rfp_data.get('customer'):
        content.append(Paragraph('Customer Information', heading_style))
        content.append(Paragraph(rfp_data['customer'], normal_style))
        content.append(Spacer(1, 0.25*inch))

    if rfp_data.get('scope'):
        content.append(Paragraph('Scope of Work', heading_style))
        content.append(Paragraph(rfp_data['scope'], normal_style))
        content.append(Spacer(1, 0.25*inch))

    if rfp_data.get('requirements'):
        content.append(Paragraph('Requirements', heading_style))
        reqs_by_category: Dict[str, List] = {}
        for req in rfp_data['requirements']:
            cat = req.get('category', 'General')
            reqs_by_category.setdefault(cat, []).append(req)
        for category, reqs in reqs_by_category.items():
            content.append(Paragraph(category, subheading_style))
            table_data = [["Requirement", "Page"]]
            for req in reqs:
                table_data.append([Paragraph(req.get('description', 'No description'), normal_style), req.get('page', 'N/A')])
            req_table = Table(table_data, colWidths=[5*inch, 0.5*inch])
            req_table.setStyle(TableStyle([
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (1, 0), (1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ]))
            content.append(req_table)
            content.append(Spacer(1, 0.15*inch))
        content.append(Spacer(1, 0.1*inch))

    if rfp_data.get('tasks'):
        content.append(Paragraph('Tasks', heading_style))
        table_data = [["Task", "Description", "Page"]]
        for task in rfp_data['tasks']:
            table_data.append([
                Paragraph(task.get('title', 'Task'), normal_style),
                Paragraph(task.get('description', 'No description'), normal_style),
                task.get('page', 'N/A'),
            ])
        task_table = Table(table_data, colWidths=[1.5*inch, 3.5*inch, 0.5*inch])
        task_table.setStyle(TableStyle([
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (2, 0), (2, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ]))
        content.append(task_table)
        content.append(Spacer(1, 0.25*inch))

    if rfp_data.get('dates'):
        content.append(Paragraph('Key Dates', heading_style))
        table_data = [["Event", "Date", "Page"]]
        for date_item in rfp_data['dates']:
            table_data.append([
                Paragraph(date_item.get('event', 'Event'), normal_style),
                Paragraph(date_item.get('date', 'No date'), normal_style),
                date_item.get('page', 'N/A'),
            ])
        date_table = Table(table_data, colWidths=[2.5*inch, 2.5*inch, 0.5*inch])
        date_table.setStyle(TableStyle([
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (2, 0), (2, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ]))
        content.append(date_table)

    def add_page_number(canvas, doc):
        page_num = canvas.getPageNumber()
        text = f"Page {page_num}"
        canvas.setFont("Helvetica", 9)
        canvas.drawRightString(7.5*inch, 0.5*inch, text)
        canvas.drawString(0.5*inch, 0.5*inch, f"RFP Analysis: {rfp_name[:30]}")

    doc.build(content, onFirstPage=add_page_number, onLaterPages=add_page_number)
    return pdf_path


def generate_report_filename(rfp_name: str, model_used: str = "gpt-4o") -> str:
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    if st.session_state.get('user'):
        username = st.session_state.user['fullname'].replace(' ', '_')
    else:
        try:
            username = getpass.getuser()
        except Exception:
            username = 'user'
    if '.' in rfp_name:
        rfp_name = rfp_name.rsplit('.', 1)[0]
    clean_rfp_name = ''.join(c if c.isalnum() else '_' for c in rfp_name)[:30]
    clean_model = model_used.replace('-', '').replace('.', '')
    return f"RFP_Analysis_{clean_rfp_name}_{clean_model}_{username}_{timestamp}.pdf"


def process_pdf_locally(pdf_path: str, selected_sections: List[str]):
    try:
        logger.info(f'Processing PDF locally: {pdf_path}')
        st.info('Using local processing as Lambda function is unavailable...')
        if st.session_state.get('openai_api_key'):
            os.environ['OPENAI_API_KEY'] = st.session_state.openai_api_key
            debug_api_key(os.environ.get('OPENAI_API_KEY', ''), 'Environment in process_pdf_locally')
        else:
            st.error('OpenAI API Key is required for local processing. Please enter it in the sidebar.')
            return None
        result = process_rfp.process_pdf(pdf_path)
        if 'all' not in selected_sections:
            if 'requirements' in result and 'requirements' not in selected_sections:
                result['requirements'] = []
            if 'tasks' in result and 'tasks' not in selected_sections:
                result['tasks'] = []
            if 'dates' in result and 'dates' not in selected_sections:
                result['dates'] = []
        logger.info('Local processing complete')
        return result
    except Exception as e:
        logger.error(f'Local processing failed: {str(e)}')
        raise Exception(f'Failed to process PDF locally: {str(e)}')


def process_uploaded_pdf(uploaded_file, aws_region: str, s3_bucket: str, s3_key: str, lambda_url: str, selected_sections: List[str]):
    try:
        temp_path = f"/tmp/{uploaded_file.name}"
        os.makedirs('/tmp', exist_ok=True)
        with open(temp_path, 'wb') as f:
            f.write(uploaded_file.getbuffer())

        if not lambda_url:
            logger.warning("Lambda URL not configured, using local processing")
            result = process_pdf_locally(temp_path, selected_sections)
        else:
            try:
                result = upload_pdf.upload_and_process_pdf(
                    pdf_path=temp_path,
                    s3_bucket=s3_bucket,
                    s3_key=s3_key or uploaded_file.name,
                    aws_region=aws_region,
                    lambda_url=lambda_url,
                    sections=selected_sections,
                )
            except Exception as e:
                error_message = str(e)
                if '502 Server Error: Bad Gateway' in error_message:
                    st.markdown(
                        "<div class=\"alert alert-warning\"><strong>⚠️ Lambda Gateway Error - Using Local Fallback</strong><br>Cannot connect to the AWS Lambda function. Switching to local processing.</div>",
                        unsafe_allow_html=True,
                    )
                    result = process_pdf_locally(temp_path, selected_sections)
                else:
                    st.markdown(
                        f"<div class=\"alert alert-danger\"><strong>Error processing PDF:</strong> {error_message}</div>",
                        unsafe_allow_html=True,
                    )
                    return None
        if os.path.exists(temp_path):
            os.remove(temp_path)
        if result and isinstance(result, dict) and 'result' in result:
            return result['result']
        return result
    except Exception as e:
        st.markdown(
            f"<div class=\"alert alert-danger\"><strong>Error processing PDF:</strong> {str(e)}</div>",
            unsafe_allow_html=True,
        )
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return None
